/**
 * –ú–æ–¥—É–ª—å –≤–∏–¥–∂–µ—Ç–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è –∫–∏–Ω–æ–∫–ª—É–±–∞ –û–¥–∏—Å—Å–µ—è
 */
class WeatherModule {
    constructor() {
        this.config = {
            apiKey: '8ebf62377e7ff596ad44ef69a1958f3f',
            city: 'Sevastopol',
            country: 'UA',
            units: 'metric',
            lang: 'ru',
            updateInterval: 900000, // 15 –º–∏–Ω—É—Ç
            cacheTimeout: 300000 // 5 –º–∏–Ω—É—Ç
        };
        
        this.state = {
            isExpanded: false,
            isLoading: false,
            lastUpdate: null,
            weatherData: null,
            error: null
        };
        
        this.icons = {
            '01d': '‚òÄÔ∏è', '01n': 'üåô',
            '02d': '‚õÖ', '02n': '‚òÅÔ∏è',
            '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
            '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è',
            '09d': 'üåßÔ∏è', '09n': 'üåßÔ∏è',
            '10d': 'üå¶Ô∏è', '10n': 'üå¶Ô∏è',
            '11d': '‚õàÔ∏è', '11n': '‚õàÔ∏è',
            '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',
            '50d': 'üå´Ô∏è', '50n': 'üå´Ô∏è'
        };
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø–æ–≥–æ–¥—ã
     */
    init() {
        this.createWidget();
        this.loadWeatherData();
        this.setupAutoUpdate();
        this.setupEventListeners();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–∏–¥–∂–µ—Ç–∞
     */
    createWidget() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ –≤–∏–¥–∂–µ—Ç
        if (document.querySelector('.weather-widget')) {
            this.widget = document.querySelector('.weather-widget');
            return;
        }

        const widget = document.createElement('div');
        widget.className = 'weather-widget';
        widget.innerHTML = this.getWidgetHTML();
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –ø–æ—Å–ª–µ –ª–æ–≥–æ—Ç–∏–ø–∞
        const logo = document.querySelector('.logo');
        if (logo && logo.parentNode) {
            logo.parentNode.insertBefore(widget, logo.nextSibling);
        } else {
            // Fallback: –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ header
            const header = document.querySelector('.header');
            if (header) {
                header.appendChild(widget);
            }
        }
        
        this.widget = widget;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
     */
    getWidgetHTML() {
        return `
            <div class="weather-compact">
                ${this.getCompactContent()}
            </div>
            <div class="weather-details">
                ${this.getDetailsContent()}
            </div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    getCompactContent() {
        if (this.state.isLoading) {
            return `
                <div class="weather-loading">
                    <div class="spinner"></div>
                </div>
            `;
        }

        if (this.state.error || !this.state.weatherData) {
            return `
                <div class="weather-icon">üå§Ô∏è</div>
                <div class="weather-temp">--¬∞</div>
            `;
        }

        const data = this.state.weatherData;
        const icon = this.icons[data.weather[0].icon] || 'üå§Ô∏è';

        return `
            <div class="weather-icon">${icon}</div>
            <div class="weather-temp">${Math.round(data.main.temp)}¬∞</div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    getDetailsContent() {
        if (this.state.isLoading) {
            return `
                <div class="weather-loading">
                    <div class="spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã...</p>
                </div>
            `;
        }

        if (this.state.error) {
            return `
                <div class="weather-error">
                    <p>${this.state.error}</p>
                    <button class="retry-button">–û–±–Ω–æ–≤–∏—Ç—å</button>
                </div>
            `;
        }

        if (!this.state.weatherData) {
            return `
                <div class="weather-loading">
                    <div class="spinner"></div>
                    <p>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã...</p>
                </div>
            `;
        }

        const data = this.state.weatherData;
        const icon = this.icons[data.weather[0].icon] || 'üå§Ô∏è';
        const clothingRec = this.getClothingRecommendation();

        return `
            <div class="weather-header">
                <h3 class="weather-title">–ü–æ–≥–æ–¥–∞ –≤ –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª–µ</h3>
                <button class="weather-close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>
            </div>
            <div class="weather-content">
                <div class="weather-main-icon">${icon}</div>
                <div class="weather-main-temp">${Math.round(data.main.temp)}¬∞</div>
                <div class="weather-description">${data.weather[0].description}</div>
            </div>
            <div class="weather-stats">
                <div class="weather-stat weather-feels-like">
                    <div class="stat-value">${Math.round(data.main.feels_like)}¬∞</div>
                    <div class="stat-label">–û—â—É—â–∞–µ—Ç—Å—è</div>
                </div>
                <div class="weather-stat weather-wind">
                    <div class="stat-value">${Math.round(data.wind.speed)} –º/—Å</div>
                    <div class="stat-label">–í–µ—Ç–µ—Ä</div>
                </div>
                <div class="weather-stat weather-humidity">
                    <div class="stat-value">${data.main.humidity}%</div>
                    <div class="stat-label">–í–ª–∞–∂–Ω–æ—Å—Ç—å</div>
                </div>
                <div class="weather-stat weather-pressure">
                    <div class="stat-value">${Math.round(data.main.pressure * 0.75)}</div>
                    <div class="stat-label">–º–º —Ä—Ç.—Å—Ç.</div>
                </div>
            </div>
            ${clothingRec ? `
                <div class="weather-recommendation">
                    <div class="recommendation-title">
                        <span>üëï</span>
                        <span>–ß—Ç–æ –Ω–∞–¥–µ—Ç—å:</span>
                    </div>
                    <div class="recommendation-text">${clothingRec}</div>
                </div>
            ` : ''}
        `;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
     */
    async loadWeatherData() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        if (this.shouldUseCache()) {
            this.updateDisplay();
            return;
        }

        this.state.isLoading = true;
        this.state.error = null;
        this.updateDisplay();

        try {
            const url = `https://api.openweathermap.org/data/2.5/weather?q=${this.config.city},${this.config.country}&units=${this.config.units}&lang=${this.config.lang}&appid=${this.config.apiKey}`;
            
            const response = await fetch(url);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            
            this.state.weatherData = data;
            this.state.lastUpdate = Date.now();
            this.state.isLoading = false;
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
            localStorage.setItem('weatherCache', JSON.stringify({
                data: data,
                timestamp: this.state.lastUpdate
            }));
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã:', error);
            this.state.error = this.getErrorMessage(error);
            this.state.isLoading = false;
            
            // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
            const cache = this.getCachedData();
            if (cache) {
                this.state.weatherData = cache.data;
                this.state.lastUpdate = cache.timestamp;
                this.state.error = null;
            }
        }

        this.updateDisplay();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     */
    getErrorMessage(error) {
        if (error.message.includes('404')) {
            return '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω';
        } else if (error.message.includes('401')) {
            return '–û—à–∏–±–∫–∞ API –∫–ª—é—á–∞';
        } else if (error.message.includes('network') || error.message.includes('Failed to fetch')) {
            return '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
        } else {
            return '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
     */
    shouldUseCache() {
        const cache = this.getCachedData();
        if (cache && (Date.now() - cache.timestamp) < this.config.cacheTimeout) {
            this.state.weatherData = cache.data;
            this.state.lastUpdate = cache.timestamp;
            return true;
        }
        return false;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
     */
    getCachedData() {
        try {
            const cache = localStorage.getItem('weatherCache');
            return cache ? JSON.parse(cache) : null;
        } catch (error) {
            return null;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
     */
    updateDisplay() {
        if (!this.widget) return;

        const compactElement = this.widget.querySelector('.weather-compact');
        const detailsElement = this.widget.querySelector('.weather-details');

        if (compactElement) {
            compactElement.innerHTML = this.getCompactContent();
        }

        if (detailsElement) {
            detailsElement.innerHTML = this.getDetailsContent();
        }

        this.setupDynamicEventListeners();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    setupAutoUpdate() {
        setInterval(() => {
            this.loadWeatherData();
        }, this.config.updateInterval);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ–≥–æ–¥—ã
        this.widget.addEventListener('click', (e) => {
            const compact = this.widget.querySelector('.weather-compact');
            if (compact && compact.contains(e.target)) {
                this.toggleDetails();
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –≤–∏–¥–∂–µ—Ç–∞
        document.addEventListener('click', (e) => {
            if (!this.widget.contains(e.target) && this.state.isExpanded) {
                this.closeDetails();
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.state.isExpanded) {
                this.closeDetails();
            }
        });

        this.setupDynamicEventListeners();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupDynamicEventListeners() {
        const retryButton = this.widget.querySelector('.retry-button');
        if (retryButton) {
            retryButton.addEventListener('click', (e) => {
                e.stopPropagation();
                this.loadWeatherData();
            });
        }

        const closeButton = this.widget.querySelector('.weather-close');
        if (closeButton) {
            closeButton.addEventListener('click', (e) => {
                e.stopPropagation();
                this.closeDetails();
            });
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
     */
    toggleDetails() {
        this.state.isExpanded = !this.state.isExpanded;
        this.widget.classList.toggle('expanded', this.state.isExpanded);
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π
     */
    closeDetails() {
        this.state.isExpanded = false;
        this.widget.classList.remove('expanded');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–¥–µ–∂–¥–µ
     */
    getClothingRecommendation() {
        if (!this.state.weatherData) return '';

        const temp = this.state.weatherData.main.temp;
        const weather = this.state.weatherData.weather[0].main;
        const wind = this.state.weatherData.wind.speed;

        let recommendation = '';

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
        if (temp >= 25) {
            recommendation = '–õ–µ–≥–∫–∞—è –æ–¥–µ–∂–¥–∞, —à–æ—Ä—Ç—ã, —Ñ—É—Ç–±–æ–ª–∫–∞, –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –æ—Ç —Å–æ–ª–Ω—Ü–∞';
        } else if (temp >= 18) {
            recommendation = '–§—É—Ç–±–æ–ª–∫–∞, –ª–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ –∫–æ—Ñ—Ç–∞';
        } else if (temp >= 10) {
            recommendation = '–¢–µ–ø–ª–∞—è –∫–æ—Ñ—Ç–∞, –≤–µ—Ç—Ä–æ–≤–∫–∞, –¥–∂–∏–Ω—Å—ã';
        } else if (temp >= 0) {
            recommendation = '–ü–∞–ª—å—Ç–æ, —à–∞–ø–∫–∞, —à–∞—Ä—Ñ, –ø–µ—Ä—á–∞—Ç–∫–∏';
        } else {
            recommendation = '–¢–µ–ø–ª–∞—è –∑–∏–º–Ω—è—è –æ–¥–µ–∂–¥–∞, —Ç–µ—Ä–º–æ–±–µ–ª—å–µ';
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (weather === 'Rain') {
            recommendation += ', –∑–æ–Ω—Ç –∏–ª–∏ –¥–æ–∂–¥–µ–≤–∏–∫, –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º–∞—è –æ–±—É–≤—å';
        } else if (weather === 'Snow') {
            recommendation += ', –∑–∏–º–Ω—è—è –æ–±—É–≤—å —Å –ø—Ä–æ—Ç–∏–≤–æ—Å–∫–æ–ª—å–∑—è—â–µ–π –ø–æ–¥–æ—à–≤–æ–π';
        }

        if (wind > 8) {
            recommendation += ', –≤–µ—Ç—Ä–æ–≤–∫–∞ –∏–ª–∏ –∫—É—Ä—Ç–∫–∞ –æ—Ç –≤–µ—Ç—Ä–∞';
        }

        return recommendation;
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø–æ–≥–æ–¥—ã
 */
function initWeatherModule() {
    try {
        new WeatherModule();
        console.log('–ú–æ–¥—É–ª—å –ø–æ–≥–æ–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –ø–æ–≥–æ–¥—ã:', error);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initWeatherModule);
} else {
    initWeatherModule();
}
