class Quiz {
    constructor() {
        this.questions = [];
        this.currentQuestionIndex = 0;
        this.currentRound = 1;
        this.score = 0;
        this.timer = null;
        this.timeLeft = 0;
        this.hintsUsed = 0;
        this.maxHints = 2;
        this.userAnswers = [];
        this.quizStarted = false;
        this.roundResults = [];
        this.showingAnswers = false;
        this.currentAnswerIndex = 0;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
        this.isBroadcastMode = document.body.classList.contains('quiz-broadcast');

        this.init();
    }

    async init() {
        await this.loadQuestions();
        this.bindEvents();

        // –î–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
        if (this.isBroadcastMode) {
            this.applyBroadcastStyles();
        }
    }

    applyBroadcastStyles() {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
        const style = document.createElement('style');
        style.textContent = `
            .quiz-broadcast .question-text {
                font-size: 2.5em !important;
                font-weight: 600;
            }
            .quiz-broadcast .answer-text {
                font-size: 1.8em !important;
                font-weight: 500;
            }
            .quiz-broadcast .quiz-instruction {
                font-size: 1.3em !important;
            }
            .quiz-broadcast .instruction-badge {
                font-size: 1.4em !important;
            }
        `;
        document.head.appendChild(style);
    }

    async loadQuestions() {
        try {
            const response = await fetch('../data/quiz-questions.json');
            const data = await response.json();
            this.questions = data.questions;
            this.quizConfig = data.config;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
            this.loadFallbackQuestions();
        }
    }

    loadFallbackQuestions() {
        // –†–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        this.questions = [
            // –¢—É—Ä 1: –§–æ—Ç–æ + –æ—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç–≤–µ—Ç (1 –º–∏–Ω—É—Ç–∞)
            {
                round: 1,
                type: 'open',
                question: "–ù–∞–∑–æ–≤–∏—Ç–µ —Ñ–∏–ª—å–º –∏ —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –ø–æ –∫–∞–¥—Ä—É",
                image: "../images/quiz/round1-1.jpg",
                correctAnswer: "–ë–µ–≥—É—â–∏–π –ø–æ –ª–µ–∑–≤–∏—é 2049, –î–µ–Ω–∏ –í–∏–ª—å–Ω—ë–≤",
                time: 60
            },
            // –¢—É—Ä 2: –§–æ—Ç–æ + –æ—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç–≤–µ—Ç (1 –º–∏–Ω—É—Ç–∞)
            {
                round: 2,
                type: 'open',
                question: "–ö–∞–∫–æ–π –∞–∫—Ç–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ –∏ –≤ –∫–∞–∫–æ–º —Ñ–∏–ª—å–º–µ?",
                image: "../images/quiz/round2-1.jpg",
                correctAnswer: "–†–æ–±–µ—Ä—Ç –î–µ –ù–∏—Ä–æ, –¢–∞–∫—Å–∏—Å—Ç",
                time: 60
            },
            // –¢—É—Ä 3: –í–æ–ø—Ä–æ—Å —Å –≤—ã–±–æ—Ä–æ–º (1 –º–∏–Ω—É—Ç–∞)
            {
                round: 3,
                type: 'multiple',
                question: "–ö—Ç–æ —Ä–µ–∂–∏—Å—Å–µ—Ä —Ñ–∏–ª—å–º–∞ '–°–µ–º—å —Å–∞–º—É—Ä–∞–µ–≤'?",
                answers: [
                    "–Ø—Å—É–¥–∑–∏—Ä–æ –û–¥–∑—É",
                    "–ê–∫–∏—Ä–∞ –ö—É—Ä–æ—Å–∞–≤–∞",
                    "–ö—ç–Ω–∂–∏ –ú–∏–¥–∑–æ–≥—É—Ç–∏",
                    "–•–∏—Ä–æ—Å–∏ –¢—ç—Å–∏–≥–∞—Ö–∞—Ä–∞"
                ],
                correctAnswer: 1,
                time: 60
            },
            // –¢—É—Ä 4: –§–æ—Ç–æ + –æ—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç–≤–µ—Ç (1 –º–∏–Ω—É—Ç–∞)
            {
                round: 4,
                type: 'open',
                question: "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ñ–∏–ª—å–º –ø–æ —ç—Ç–æ–º—É iconic –∫–∞–¥—Ä—É",
                image: "../images/quiz/round4-1.jpg",
                correctAnswer: "–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –æ–¥–∏—Å—Å–µ—è 2001 –≥–æ–¥–∞",
                time: 60
            },
            // –¢—É—Ä 5: –§–æ—Ç–æ + –æ—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç–≤–µ—Ç (1 –º–∏–Ω—É—Ç–∞)  
            {
                round: 5,
                type: 'open',
                question: "–ù–∞–∑–æ–≤–∏—Ç–µ —Ä–µ–∂–∏—Å—Å–µ—Ä –∏ —Ñ–∏–ª—å–º",
                image: "../images/quiz/round5-1.jpg",
                correctAnswer: "–ê–Ω–¥—Ä–µ–π –¢–∞—Ä–∫–æ–≤—Å–∫–∏–π, –°—Ç–∞–ª–∫–µ—Ä",
                time: 60
            },
            // –¢—É—Ä 6: –§–æ—Ç–æ + –æ—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç–≤–µ—Ç (1 –º–∏–Ω—É—Ç–∞)
            {
                round: 6,
                type: 'open',
                question: "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?",
                image: "../images/quiz/round6-1.jpg",
                correctAnswer: "–†–∞—Å—ë–º–æ–Ω",
                time: 60
            },
            // –¢—É—Ä 7: –ë–ª–∏—Ü (30 —Å–µ–∫—É–Ω–¥)
            {
                round: 7,
                type: 'blitz',
                question: "–ë–ª–∏—Ü-—Ä–∞—É–Ω–¥! –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 5 –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤",
                blitzQuestions: [
                    {
                        question: "–í –∫–∞–∫–æ–º –≥–æ–¥—É –≤—ã—à–µ–ª '–ö—Ä–µ—Å—Ç–Ω—ã–π –æ—Ç–µ—Ü'?",
                        correctAnswer: "1972"
                    },
                    {
                        question: "–ö—Ç–æ —Å—ã–≥—Ä–∞–ª –≥–ª–∞–≤–Ω—É—é —Ä–æ–ª—å –≤ '–ó–∞–≤–æ–¥–Ω–æ–º –∞–ø–µ–ª—å—Å–∏–Ω–µ'?",
                        correctAnswer: "–ú–∞–ª–∫–æ–ª—å–º –ú–∞–∫–¥–∞—É—ç–ª–ª"
                    },
                    {
                        question: "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –ø–æ–ª—É—á–∏–ª –û—Å–∫–∞—Ä –∑–∞ –ª—É—á—à–∏–π —Ñ–∏–ª—å–º –≤ 1994?",
                        correctAnswer: "–§–æ—Ä—Ä–µ—Å—Ç –ì–∞–º–ø"
                    },
                    {
                        question: "–†–µ–∂–∏—Å—Å–µ—Ä '–ü–æ–¥–≤–æ–¥–Ω–æ–π –ª–æ–¥–∫–∏'?",
                        correctAnswer: "–í–æ–ª—å—Ñ–≥–∞–Ω–≥ –ü–µ—Ç–µ—Ä—Å–µ–Ω"
                    },
                    {
                        question: "–ê–∫—Ç–µ—Ä, —Å—ã–≥—Ä–∞–≤—à–∏–π –î–∞—Ä—Ç–∞ –í–µ–π–¥–µ—Ä–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ç—Ä–∏–ª–æ–≥–∏–∏?",
                        correctAnswer: "–î—ç–≤–∏–¥ –ü—Ä–æ—É–∑"
                    }
                ],
                time: 30
            }
        ];
    }

    bindEvents() {
        const startBtn = document.getElementById('start-quiz-btn');
        if (startBtn) {
            startBtn.addEventListener('click', () => {
                this.startQuiz();
            });
        }

        const leadersBtn = document.getElementById('view-leaders');
        if (leadersBtn) {
            leadersBtn.addEventListener('click', () => {
                this.showLeaderboard();
            });
        }

        // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if (!this.isBroadcastMode) {
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    }
                });
            });
        }
    }

    startQuiz() {
        this.quizStarted = true;
        this.currentQuestionIndex = 0;
        this.currentRound = 1;
        this.score = 0;
        this.hintsUsed = 0;
        this.userAnswers = [];
        this.roundResults = [];
        this.showingAnswers = false;
        this.currentAnswerIndex = 0;

        document.getElementById('quiz-welcome').style.display = 'none';
        document.getElementById('quiz-questions').style.display = 'block';
        document.getElementById('quiz-results').style.display = 'none';

        this.showInstructions();
    }

    showInstructions() {
        const questionsContainer = document.getElementById('quiz-questions');

        questionsContainer.innerHTML = `
            <div class="instructions-container">
                <h2>üé¨ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –∫–≤–∏–∑—É</h2>
                <div class="instructions-content">
                    <div class="instruction-item">
                        <div class="instruction-icon">üìù</div>
                        <div class="instruction-text">
                            <strong>–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –±—É–º–∞–≥–µ!</strong><br>
                            –í–æ –≤—Ä–µ–º—è –∫–≤–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–ª–∞–Ω–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∏–ª–∏ —Å–≤–æ–∏ –ª–∏—Å—Ç–æ—á–∫–∏
                        </div>
                    </div>
                    <div class="instruction-item">
                        <div class="instruction-icon">‚è±Ô∏è</div>
                        <div class="instruction-text">
                            <strong>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –≤—Ä–µ–º–µ–Ω–µ–º!</strong><br>
                            –ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–æ–¥–∏—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                        </div>
                    </div>
                    <div class="instruction-item">
                        <div class="instruction-icon">üì±</div>
                        <div class="instruction-text">
                            <strong>–¢–µ–ª–µ—Ñ–æ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã!</strong><br>
                            –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–æ –≤—Ä–µ–º—è –∫–≤–∏–∑–∞ –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
                        </div>
                    </div>
                    <div class="instruction-item">
                        <div class="instruction-icon">üèÜ</div>
                        <div class="instruction-text">
                            <strong>–°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤:</strong><br>
                            ‚Ä¢ –§–æ—Ç–æ-–≤–æ–ø—Ä–æ—Å—ã: 15 –±–∞–ª–ª–æ–≤<br>
                            ‚Ä¢ –í–æ–ø—Ä–æ—Å—ã —Å –≤—ã–±–æ—Ä–æ–º: 10 –±–∞–ª–ª–æ–≤<br>
                            ‚Ä¢ –ë–ª–∏—Ü-–≤–æ–ø—Ä–æ—Å—ã: 5 –±–∞–ª–ª–æ–≤ –∑–∞ –æ—Ç–≤–µ—Ç
                        </div>
                    </div>
                    <div class="instruction-item">
                        <div class="instruction-icon">üîç</div>
                        <div class="instruction-text">
                            <strong>–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤:</strong><br>
                            –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç—É—Ä–∞ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏
                        </div>
                    </div>
                </div>
                <div class="instructions-warning">
                    ‚ö†Ô∏è <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> <br>–î–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º. –û–Ω–∞ –Ω–µ –Ω–µ—Å—ë—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –ø–æ–¥—Ç–µ–∫—Å—Ç–∞ –∏ –Ω–µ –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –Ω–∏ –∫ –∫–∞–∫–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º. <br>–í—Å—ë –±—ã–ª–æ –∑–∞–¥—É–º–∞–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è, –ø–æ—ç—Ç–æ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–Ω–µ—Å—Ç–∏—Å—å –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –ø—Ä–æ—Å—Ç–æ –∏ —Å –¥–æ–ª–µ–π –∑–¥–æ—Ä–æ–≤–æ–≥–æ —é–º–æ—Ä–∞. –ü–æ–º–Ω–∏—Ç–µ, –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –ø–æ–ª—É—á–∏—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ!
                </div>
                <button class="btn btn--primary start-quiz-after-instructions">
                    –ü–æ–Ω—è—Ç–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –∫–≤–∏–∑!
                </button>
            </div>
        `;

        document.querySelector('.start-quiz-after-instructions').addEventListener('click', () => {
            this.showRoundIntro();
        });
    }

    showRoundIntro() {
        const questionsContainer = document.getElementById('quiz-questions');
        const currentRoundQuestions = this.questions.filter(q => q.round === this.currentRound);

        questionsContainer.innerHTML = `
            <div class="round-intro">
                <h2>–¢—É—Ä ${this.currentRound}</h2>
                <div class="round-info">
                    ${this.getRoundDescription(this.currentRound)}
                </div>
                <div class="round-stats">
                    <div class="stat-item">
                        <div class="stat-number">${currentRoundQuestions.length}</div>
                        <div class="stat-label">–≤–æ–ø—Ä–æ—Å–æ–≤</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">${this.getRoundTime(this.currentRound)}</div>
                        <div class="stat-label">—Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–æ–ø—Ä–æ—Å</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">${this.getRoundType(this.currentRound)}</div>
                        <div class="stat-label">—Ç–∏–ø –≤–æ–ø—Ä–æ—Å–æ–≤</div>
                    </div>
                </div>
                <div class="round-instruction">
                    <p>üìù <strong>–ì–æ—Ç–æ–≤—å—Ç–µ –±–ª–∞–Ω–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤!</strong></p>
                    <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏</p>
                </div>
                <button class="btn btn--primary start-round-btn">–ù–∞—á–∞—Ç—å —Ç—É—Ä ${this.currentRound}</button>
            </div>
        `;

        document.querySelector('.start-round-btn').addEventListener('click', () => {
            this.showQuestion();
        });
    }

    getRoundDescription(round) {
        const descriptions = {
            1: "–§–æ—Ç–æ-—Ç—É—Ä: –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ñ–∏–ª—å–º –ø–æ –∫–∞–¥—Ä—É. –ß–µ—Ä–Ω–æ –ë–µ–ª—ã–µ —Ñ–∏–ª—å–º—ã + 1 —Ü–≤–µ—Ç–Ω–æ–π",
            2: "–§–æ—Ç–æ-—Ç—É—Ä: –£–∑–Ω–∞–π—Ç–µ –∞–∫—Ç–µ—Ä–∞ –∏ —Ñ–∏–ª—å–º",
            3: "–¢—É—Ä —Å –≤—ã–±–æ—Ä–æ–º: 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞",
            4: "–§–æ—Ç–æ-—Ç—É—Ä: Iconic –∫–∞–¥—Ä—ã –∫–∏–Ω–æ",
            5: "–§–æ—Ç–æ-—Ç—É—Ä: –†–µ–∂–∏—Å—Å–µ—Ä—ã –∏ –∏—Ö —Ñ–∏–ª—å–º—ã",
            6: "–§–æ—Ç–æ-—Ç—É—Ä: –ö–ª–∞—Å—Å–∏–∫–∞ –º–∏—Ä–æ–≤–æ–≥–æ –∫–∏–Ω–æ",
            7: "–ë–ª–∏—Ü-—Ä–∞—É–Ω–¥: 5 –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ 30 —Å–µ–∫—É–Ω–¥!"
        };
        return descriptions[round] || `–¢—É—Ä ${round}`;
    }

    getRoundTime(round) {
        return round === 7 ? 30 : 60;
    }

    getRoundType(round) {
        return [1, 2, 4, 5, 6].includes(round) ? '–§–æ—Ç–æ' :
            round === 3 ? '–í—ã–±–æ—Ä' : '–ë–ª–∏—Ü';
    }

    showQuestion() {
        const currentRoundQuestions = this.questions.filter(q => q.round === this.currentRound);

        if (this.currentQuestionIndex >= currentRoundQuestions.length) {
            this.showRoundAnswers();
            return;
        }

        const question = currentRoundQuestions[this.currentQuestionIndex];
        const questionsContainer = document.getElementById('quiz-questions');

        questionsContainer.innerHTML = `
            <div class="question-slide">
                <div class="question-header">
                    <div class="question-progress">
                        <span>–¢—É—Ä ${this.currentRound} ‚Ä¢ –í–æ–ø—Ä–æ—Å ${this.currentQuestionIndex + 1} –∏–∑ ${currentRoundQuestions.length}</span>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${((this.currentQuestionIndex + 1) / currentRoundQuestions.length) * 100}%"></div>
                        </div>
                    </div>
                    <div class="question-timer" id="timer">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm.5-13H11v6l5.2 3.2.8-1.3-4.5-2.7V7z"/>
                        </svg>
                        <span id="time-left">${question.time}</span>
                    </div>
                </div>

                <div class="question-content">
                    ${question.image ? `
                        <div class="question-image">
                            <img src="${question.image}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É" loading="lazy">
                            <div class="quiz-logo">
                                <img src="../images/quiz-logo.png" alt="–õ–æ–≥–æ—Ç–∏–ø Odissea Quiz">
                            </div>
                        </div>
                    ` : ''}
                    
                    <h3 class="question-text">${question.question}</h3>
                    
                    ${this.renderQuestionContent(question)}
                </div>

                <div class="quiz-navigation">
                    <div class="nav-buttons">
                        <button class="btn btn--outline nav-btn prev-btn" id="prev-btn" ${this.currentQuestionIndex === 0 ? 'disabled' : ''}>
                            ‚Üê –ù–∞–∑–∞–¥
                        </button>
                        <button class="btn btn--primary nav-btn next-btn" id="next-btn">
                            ${this.currentQuestionIndex === currentRoundQuestions.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä' : '–î–∞–ª–µ–µ ‚Üí'}
                        </button>
                    </div>
                    <div class="nav-hint">
                        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
                    </div>
                </div>
            </div>
        `;

        this.bindNavigationEvents(currentRoundQuestions);
        this.startTimer(question.time);
    }

    renderQuestionContent(question) {
        switch (question.type) {
            case 'multiple':
                return `
                    <div class="answers-grid">
                        ${question.answers.map((answer, index) => `
                            <div class="answer-option">
                                <span class="answer-letter">${String.fromCharCode(65 + index)}</span>
                                <span class="answer-text">${answer}</span>
                            </div>
                        `).join('')}
                    </div>
                    <div class="answer-hint">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –∑–∞–ø–∏—à–∏—Ç–µ –±—É–∫–≤—É –æ—Ç–≤–µ—Ç–∞ (A, B, C, D)</div>
                `;
            case 'blitz':
                return `
                    <div class="blitz-container">
                        ${question.blitzQuestions.map((blitzQ, index) => `
                            <div class="blitz-question">
                                <p><strong>${index + 1}.</strong> ${blitzQ.question}</p>
                            </div>
                        `).join('')}
                    </div>
                    <div class="answer-hint">–ó–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ</div>
                `;
            default: // open
                return ``;
        }
    }

    bindNavigationEvents(currentRoundQuestions) {
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');

        prevBtn.addEventListener('click', () => {
            this.goToPreviousQuestion();
        });

        nextBtn.addEventListener('click', () => {
            this.goToNextQuestion();
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') {
                this.goToPreviousQuestion();
            } else if (e.key === 'ArrowRight' || e.key === ' ') {
                this.goToNextQuestion();
            }
        });
    }

    goToPreviousQuestion() {
        if (this.currentQuestionIndex > 0) {
            clearInterval(this.timer);
            this.currentQuestionIndex--;
            this.showQuestion();
        }
    }

    goToNextQuestion() {
        const currentRoundQuestions = this.questions.filter(q => q.round === this.currentRound);
        clearInterval(this.timer);

        if (this.currentQuestionIndex < currentRoundQuestions.length - 1) {
            this.currentQuestionIndex++;
            this.showQuestion();
        } else {
            this.showRoundAnswers();
        }
    }

    startTimer(time) {
        this.timeLeft = time;
        const timerElement = document.getElementById('time-left');
        const timeRemainingElement = document.getElementById('time-remaining');

        this.timer = setInterval(() => {
            this.timeLeft--;

            if (timerElement) timerElement.textContent = this.timeLeft;
            if (timeRemainingElement) timeRemainingElement.textContent = this.timeLeft;

            if (this.timeLeft <= 10) {
                if (timerElement) timerElement.parentElement.classList.add('timer-critical');
            }

            if (this.timeLeft <= 0) {
                clearInterval(this.timer);
                this.goToNextQuestion();
            }
        }, 1000);
    }

    showRoundAnswers() {
        this.showingAnswers = true;
        this.currentAnswerIndex = 0;
        this.showAnswerSlide();
    }

    showAnswerSlide() {
        const currentRoundQuestions = this.questions.filter(q => q.round === this.currentRound);

        if (this.currentAnswerIndex >= currentRoundQuestions.length) {
            this.finishRound();
            return;
        }

        const question = currentRoundQuestions[this.currentAnswerIndex];
        const questionsContainer = document.getElementById('quiz-questions');

        questionsContainer.innerHTML = `
            <div class="answer-slide">
                <div class="question-header">
                    <div class="question-progress">
                        <span>–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ ‚Ä¢ –¢—É—Ä ${this.currentRound} ‚Ä¢ –û—Ç–≤–µ—Ç ${this.currentAnswerIndex + 1} –∏–∑ ${currentRoundQuestions.length}</span>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${((this.currentAnswerIndex + 1) / currentRoundQuestions.length) * 100}%"></div>
                        </div>
                    </div>
                    <div class="answer-badge">
                        üîç –ü—Ä–æ–≤–µ—Ä–∫–∞
                    </div>
                </div>

                <div class="question-content">
                    ${question.image ? `
                        <div class="question-image">
                            <img src="${question.image}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É" loading="lazy">
                            <div class="quiz-logo">
                                <img src="../images/quiz-logo.png" alt="–õ–æ–≥–æ—Ç–∏–ø Odissea Quiz">
                            </div>
                        </div>
                    ` : ''}
                    
                    <h3 class="question-text">${question.question}</h3>
                    
                    <div class="correct-answer-section">
                        <div class="correct-answer-header">
                            <span class="answer-icon">‚úÖ</span>
                            <h4>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</h4>
                        </div>
                        <div class="correct-answer-content">
                            ${this.getCorrectAnswerDisplay(question)}
                        </div>
                    </div>

                    ${this.getAnswerExplanation(question)}
                </div>

                <div class="quiz-instruction">
                    <div class="instruction-badge">
                        üìã –°–≤–µ—Ä—å—Ç–µ —Å –≤–∞—à–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏!
                    </div>
                    <p>–û—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏—Ö –±–ª–∞–Ω–∫–∞—Ö</p>
                </div>

                <div class="quiz-navigation">
                    <div class="nav-buttons">
                        <button class="btn btn--outline nav-btn prev-answer-btn" id="prev-answer-btn" ${this.currentAnswerIndex === 0 ? 'disabled' : ''}>
                            ‚Üê –ù–∞–∑–∞–¥
                        </button>
                        <button class="btn btn--primary nav-btn next-answer-btn" id="next-answer-btn">
                            ${this.currentAnswerIndex === currentRoundQuestions.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É' : '–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç ‚Üí'}
                        </button>
                    </div>
                    <div class="nav-hint">
                        –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—É—Ä—É
                    </div>
                </div>
            </div>
        `;

        this.bindAnswerNavigationEvents(currentRoundQuestions);
    }

    getCorrectAnswerDisplay(question) {
        switch (question.type) {
            case 'multiple':
                const letter = String.fromCharCode(65 + question.correctAnswer);
                return `
                    <div class="correct-answer-option">
                        <span class="answer-letter selected">${letter}</span>
                        <span class="answer-text">${question.answers[question.correctAnswer]}</span>
                    </div>
                `;
            case 'blitz':
                return `
                    <div class="blitz-answers">
                        ${question.blitzQuestions.map((blitzQ, index) => `
                            <div class="blitz-answer-item">
                                <strong>${index + 1}.</strong> ${blitzQ.correctAnswer}
                            </div>
                        `).join('')}
                    </div>
                `;
            default: // open
                return `
                    <div class="open-correct-answer">
                        <p>${question.correctAnswer}</p>
                    </div>
                `;
        }
    }

    getAnswerExplanation(question) {
        if (question.explanation) {
            return `
                <div class="answer-explanation">
                    <div class="explanation-header">
                        <span class="explanation-icon">üí°</span>
                        <h4>–ü–æ—è—Å–Ω–µ–Ω–∏–µ:</h4>
                    </div>
                    <p>${question.explanation}</p>
                </div>
            `;
        }
        return '';
    }

    bindAnswerNavigationEvents(currentRoundQuestions) {
        const prevBtn = document.getElementById('prev-answer-btn');
        const nextBtn = document.getElementById('next-answer-btn');

        prevBtn.addEventListener('click', () => {
            if (this.currentAnswerIndex > 0) {
                this.currentAnswerIndex--;
                this.showAnswerSlide();
            }
        });

        nextBtn.addEventListener('click', () => {
            if (this.currentAnswerIndex < currentRoundQuestions.length - 1) {
                this.currentAnswerIndex++;
                this.showAnswerSlide();
            } else {
                this.finishRound();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –æ—Ç–≤–µ—Ç–∞–º
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') {
                if (this.currentAnswerIndex > 0) {
                    this.currentAnswerIndex--;
                    this.showAnswerSlide();
                }
            } else if (e.key === 'ArrowRight' || e.key === ' ') {
                if (this.currentAnswerIndex < currentRoundQuestions.length - 1) {
                    this.currentAnswerIndex++;
                    this.showAnswerSlide();
                } else {
                    this.finishRound();
                }
            }
        });
    }

    finishRound() {
        this.showingAnswers = false;

        const questionsContainer = document.getElementById('quiz-questions');
        const currentRoundQuestions = this.questions.filter(q => q.round === this.currentRound);

        questionsContainer.innerHTML = `
            <div class="round-results">
                <h2>–¢—É—Ä ${this.currentRound} –∑–∞–≤–µ—Ä—à–µ–Ω! üéØ</h2>
                <div class="round-summary">
                    <p>–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ <strong>${currentRoundQuestions.length}</strong> –≤–æ–ø—Ä–æ—Å–æ–≤</p>
                    <p>–ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã</p>
                    <p>–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—É—Ä—É</p>
                </div>

                <div class="round-stats">
                    <div class="stat-item">
                        <div class="stat-number">${currentRoundQuestions.length}</div>
                        <div class="stat-label">–≤–æ–ø—Ä–æ—Å–æ–≤</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">${this.getRoundType(this.currentRound)}</div>
                        <div class="stat-label">—Ç–∏–ø —Ç—É—Ä–∞</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">${this.currentRound}/7</div>
                        <div class="stat-label">–ø—Ä–æ–≥—Ä–µ—Å—Å</div>
                    </div>
                </div>

                <div class="round-actions">
                    ${this.currentRound < 7 ?
                `<button class="btn btn--primary next-round-btn">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—É—Ä—É ${this.currentRound + 1}</button>` :
                `<button class="btn btn--primary finish-quiz-btn">–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–∏–∑</button>`
            }
                </div>
            </div>
        `;

        if (this.currentRound < 7) {
            document.querySelector('.next-round-btn').addEventListener('click', () => {
                this.currentRound++;
                this.currentQuestionIndex = 0;
                this.currentAnswerIndex = 0;
                this.showRoundIntro();
            });
        } else {
            document.querySelector('.finish-quiz-btn').addEventListener('click', () => {
                this.finishQuiz();
            });
        }
    }

    finishQuiz() {
        this.quizStarted = false;
        document.getElementById('quiz-questions').style.display = 'none';
        document.getElementById('quiz-results').style.display = 'block';
        this.showResults();
    }

    showResults() {
        const resultsContainer = document.getElementById('quiz-results');

        resultsContainer.innerHTML = `
            <div class="results-content">
                <h2>–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! üé¨</h2>
                <div class="final-message">
                    <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–≤–∏–∑–µ "Odissea"!</p>
                    <p>–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ 7 —Ç—É—Ä–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –æ—Ç–≤–µ—Ç—ã.</p>
                    <p>–°–¥–∞–π—Ç–µ –≤–∞—à–∏ –±–ª–∞–Ω–∫–∏ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.</p>
                </div>

                <div class="quiz-stats">
                    <div class="stat-item">
                        <div class="stat-number">7</div>
                        <div class="stat-label">—Ç—É—Ä–æ–≤</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">${this.questions.length}</div>
                        <div class="stat-label">–≤–æ–ø—Ä–æ—Å–æ–≤</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">~15</div>
                        <div class="stat-label">–º–∏–Ω—É—Ç</div>
                    </div>
                </div>

                <div class="results-message">
                    <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –±–ª–∞–Ω–∫–æ–≤!</p>
                </div>

                <div class="results-actions">
                    <button class="btn btn--primary" id="restart-quiz">–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</button>
                    ${!this.isBroadcastMode ? '<button class="btn btn--outline" id="view-leaderboard-final">–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤</button>' : ''}
                </div>
            </div>
        `;

        document.getElementById('restart-quiz').addEventListener('click', () => {
            this.startQuiz();
        });

        const leaderboardBtn = document.getElementById('view-leaderboard-final');
        if (leaderboardBtn) {
            leaderboardBtn.addEventListener('click', () => {
                this.showLeaderboard();
            });
        }
    }

    showLeaderboard() {
        const leaderboard = JSON.parse(localStorage.getItem('odyssey_leaderboard') || '[]');

        let leaderboardHTML = `
            <div class="leaderboard-modal">
                <div class="leaderboard-content">
                    <h2>üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤</h2>
                    <div class="leaderboard-list">
        `;

        if (leaderboard.length === 0) {
            leaderboardHTML += `<div class="no-leaders"><p>–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!</p></div>`;
        } else {
            leaderboard.forEach((entry, index) => {
                const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
                const date = new Date(entry.date).toLocaleDateString('ru-RU');

                leaderboardHTML += `
                    <div class="leaderboard-item ${index < 3 ? 'top-three' : ''}">
                        <div class="leaderboard-rank">${medal}</div>
                        <div class="leaderboard-name">${entry.name}</div>
                        <div class="leaderboard-score">${entry.score} –±–∞–ª–ª–æ–≤</div>
                        <div class="leaderboard-details">${date}</div>
                    </div>
                `;
            });
        }

        leaderboardHTML += `
                    </div>
                    <div class="leaderboard-actions">
                        <button class="btn btn--primary" id="close-leaderboard">–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            </div>
        `;

        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = leaderboardHTML;
        document.body.appendChild(modal);

        document.getElementById('close-leaderboard').addEventListener('click', () => {
            document.body.removeChild(modal);
        });

        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                document.body.removeChild(modal);
            }
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–∏–∑–∞
document.addEventListener('DOMContentLoaded', function () {
    setTimeout(() => {
        window.quiz = new Quiz();
    }, 100);
});
