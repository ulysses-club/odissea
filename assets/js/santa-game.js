/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞
 * @class
 */
class SantaGame {
    constructor() {
        this.currentUser = null;
        this.roomData = null;
        this.userAssignment = null;

        this.initializeElements();
        this.setupEventListeners();
        this.checkExistingSession();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
     */
    initializeElements() {
        this.authSection = document.getElementById('auth');
        this.dashboardSection = document.getElementById('dashboard');
        this.chatIdInput = document.getElementById('chatId-input');
        this.authBtn = document.getElementById('auth-btn');

        // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–∞—à–±–æ—Ä–¥–∞
        this.userNameElement = document.getElementById('user-name');
        this.roomNameElement = document.getElementById('room-name');
        this.roomCodeElement = document.getElementById('room-code');
        this.participantsCountElement = document.getElementById('participants-count');
        this.drawStatusElement = document.getElementById('draw-status');
        this.receiverNameElement = document.getElementById('receiver-name');
        this.receiverWishesElement = document.getElementById('receiver-wishes');
        this.receiverAddressElement = document.getElementById('receiver-address');
        this.participantsListElement = document.getElementById('participants-list');
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        this.authBtn.addEventListener('click', () => this.authenticate());
        this.chatIdInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.authenticate();
        });

        // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        document.addEventListener('click', (e) => {
            if (e.target.closest('#logout-btn')) {
                this.logout();
            }
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ - —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        this.chatIdInput.addEventListener('input', (e) => {
            e.target.value = e.target.value.replace(/[^\d]/g, '');
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
     */
    checkExistingSession() {
        const savedChatId = localStorage.getItem('santa_chatId');
        if (savedChatId) {
            this.chatIdInput.value = savedChatId;
            this.authenticate();
        }
    }

    /**
     * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async authenticate() {
        const chatId = this.chatIdInput.value.trim();

        if (!chatId) {
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
            return;
        }

        if (!/^\d+$/.test(chatId)) {
            this.showError('–ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã');
            return;
        }

        this.showLoading();

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç
            const roomsData = await this.loadRoomsData();
            const userData = this.findUserInRooms(chatId, roomsData);

            if (!userData) {
                throw new Error('–£—á–∞—Å—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É.');
            }

            this.currentUser = userData;
            this.roomData = userData.room;
            this.userAssignment = userData.assignment;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            localStorage.setItem('santa_chatId', chatId);

            this.showDashboard();

        } catch (error) {
            this.showError(error.message);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç –∏–∑ JSON —Ñ–∞–π–ª–∞
     */
    async loadRoomsData() {
        try {
            const response = await fetch('../data/rooms.json');
            if (!response.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç');
            }
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    /**
     * –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö
     */
    findUserInRooms(chatId, roomsData) {
        for (const roomCode in roomsData) {
            const room = roomsData[roomCode];
            const participants = room.participants;

            if (participants[chatId]) {
                const user = participants[chatId];
                const assignment = this.findUserAssignment(chatId, room);

                return {
                    user: user,
                    room: {
                        name: room.name,
                        code: room.code,
                        participants: Object.values(participants).map(p => ({
                            name: p.name,
                            chatId: p.chatId
                        })),
                        drawCompleted: room.drawCompleted,
                        isActive: room.isActive
                    },
                    assignment: assignment
                };
            }
        }
        return null;
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∂–µ—Ä–µ–±—å—ë–≤–∫–µ
     */
    findUserAssignment(chatId, room) {
        if (!room.drawResults || !room.drawCompleted) {
            return {
                receiver: null,
                wishes: '–ñ–µ—Ä–µ–±—å—ë–≤–∫–∞ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞',
                address: '–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∂–µ—Ä–µ–±—å—ë–≤–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º'
            };
        }

        const assignment = room.drawResults.find(result =>
            result.giver.chatId.toString() === chatId
        );

        if (!assignment) {
            return {
                receiver: null,
                wishes: '–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç–µ–∫—É—â–µ–π –∂–µ—Ä–µ–±—å—ë–≤–∫–µ',
                address: '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É'
            };
        }

        return {
            receiver: assignment.receiver.name,
            wishes: assignment.receiver.wishes || '–ü–æ–∂–µ–ª–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
            address: assignment.receiver.address || '–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã'
        };
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
     */
    showDashboard() {
        this.authSection.classList.add('hidden');
        this.dashboardSection.classList.remove('hidden');

        this.updateDashboard();
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
     */
    updateDashboard() {
        if (!this.currentUser || !this.roomData) return;

        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        this.userNameElement.textContent = this.currentUser.user.name;
        this.roomNameElement.textContent = this.roomData.name;
        this.roomCodeElement.textContent = this.roomData.code;
        this.participantsCountElement.textContent = this.roomData.participants.length;

        // –°—Ç–∞—Ç—É—Å –∂–µ—Ä–µ–±—å—ë–≤–∫–∏
        if (this.roomData.drawCompleted) {
            this.drawStatusElement.textContent = '–ó–∞–≤–µ—Ä—à–µ–Ω–∞';
            this.drawStatusElement.className = 'detail-value status-completed';
        } else {
            this.drawStatusElement.textContent = '–û–∂–∏–¥–∞–µ—Ç—Å—è';
            this.drawStatusElement.className = 'detail-value status-pending';
        }

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ
        if (this.userAssignment && this.userAssignment.receiver) {
            this.receiverNameElement.textContent = this.userAssignment.receiver;
            this.receiverWishesElement.textContent = this.userAssignment.wishes;
            this.receiverAddressElement.textContent = this.userAssignment.address;
        } else {
            this.receiverNameElement.textContent = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∂–µ—Ä–µ–±—å—ë–≤–∫–∏';
            this.receiverWishesElement.textContent = this.userAssignment?.wishes || '–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∂–µ—Ä–µ–±—å—ë–≤–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º';
            this.receiverAddressElement.textContent = this.userAssignment?.address || '–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∂–µ—Ä–µ–±—å—ë–≤–∫–∏';
        }

        // –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        this.updateParticipantsList();
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    updateParticipantsList() {
        if (!this.roomData || !this.participantsListElement) return;

        this.participantsListElement.innerHTML = this.roomData.participants
            .map(participant => {
                const isCurrentUser = participant.chatId.toString() === this.currentUser.user.chatId.toString();
                const avatarText = participant.name.charAt(0).toUpperCase();

                return `
                    <div class="participant-card ${isCurrentUser ? 'current-user' : ''}">
                        <div class="participant-avatar">${avatarText}</div>
                        <div class="participant-name">${participant.name}</div>
                        <div class="participant-status">${isCurrentUser ? '–≠—Ç–æ –≤—ã! üéÖ' : '–£—á–∞—Å—Ç–Ω–∏–∫'}</div>
                    </div>
                `;
            })
            .join('');
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoading() {
        this.authBtn.disabled = true;
        this.authBtn.innerHTML = '<span class="btn-icon">‚è≥</span>–ó–∞–≥—Ä—É–∑–∫–∞...';
    }

    /**
     * –°–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hideLoading() {
        this.authBtn.disabled = false;
        this.authBtn.innerHTML = '<span class="btn-icon">üéÅ</span>–£–∑–Ω–∞—Ç—å —Å–≤–æ–µ–≥–æ –°–∞–Ω—Ç—É';
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    showError(message) {
        this.hideLoading();

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #ff4757;
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            z-index: 10000;
            max-width: 300px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        `;
        errorDiv.textContent = message;

        document.body.appendChild(errorDiv);

        setTimeout(() => {
            errorDiv.remove();
        }, 5000);
    }

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    logout() {
        localStorage.removeItem('santa_chatId');
        this.currentUser = null;
        this.roomData = null;
        this.userAssignment = null;

        this.dashboardSection.classList.add('hidden');
        this.authSection.classList.remove('hidden');
        this.chatIdInput.value = '';
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
 */
function initSantaGame() {
    window.santaGame = new SantaGame();
    console.log('–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSantaGame);
} else {
    initSantaGame();
}
