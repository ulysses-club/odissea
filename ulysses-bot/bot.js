const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const nodeSchedule = require('node-schedule');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
const logFile = path.join(__dirname, 'bot.log');
function log(message) {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}\n`;
  fs.appendFileSync(logFile, logMessage);
  console.log(logMessage);
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TOKEN = '7585006393:AAFttPbydsMRVtm6V7g4SixfvjS8pnNY3CU';
const ADMIN_IDS = ['1147849296', '863909091']; // –î–æ–±–∞–≤–ª–µ–Ω –≤—Ç–æ—Ä–æ–π –∞–¥–º–∏–Ω
const SUBSCRIPTIONS_FILE = path.join(__dirname, 'subscriptions.json');
const VOTING_FILE = path.join(__dirname, 'voting.json');
const HISTORY_FILE = path.join(__dirname, 'history.json');
const NEXT_MEETING_FILE = path.join(__dirname, 'next_meeting.json'); // –§–∞–π–ª –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –æ–ø—Ü–∏—è–º–∏
const bot = new TelegramBot(TOKEN, {
  polling: true,
  filepath: false,
  baseApiUrl: 'https://api.telegram.org'
});

// –ê–Ω–∏–º–∞—Ü–∏–∏
const animations = {
  welcome: 'https://media.giphy.com/media/3o7abKhOpu0NwenH3O/giphy.gif',
  movie: 'https://media.giphy.com/media/3o6Zt6ML6BklcajjsA/giphy.gif',
  success: 'https://media.giphy.com/media/XreQmk7ETCak0/giphy.gif',
  error: 'https://media.giphy.com/media/TqiwHbFBaZ4ti/giphy.gif',
  voting: 'https://media.giphy.com/media/l0HU7JI1nzKC7kUaI/giphy.gif'
};

// –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function loadSubscriptions() {
  try {
    if (!fs.existsSync(SUBSCRIPTIONS_FILE)) {
      return new Set();
    }
    const data = fs.readFileSync(SUBSCRIPTIONS_FILE, 'utf8');
    return new Set(JSON.parse(data));
  } catch (err) {
    log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: ${err}`);
    return new Set();
  }
}

function saveSubscriptions(subscriptions) {
  try {
    fs.writeFileSync(SUBSCRIPTIONS_FILE, JSON.stringify([...subscriptions]));
  } catch (err) {
    log(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: ${err}`);
  }
}

function loadVoting() {
  try {
    if (!fs.existsSync(VOTING_FILE)) {
      return {
        active: false,
        startTime: null,
        endTime: null,
        ratings: {},
        average: null,
        film: null,
        genre: null,
        poster: null
      };
    }
    return JSON.parse(fs.readFileSync(VOTING_FILE, 'utf8'));
  } catch (err) {
    log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${err}`);
    return {
      active: false,
      startTime: null,
      endTime: null,
      ratings: {},
      average: null,
      film: null,
      genre: null,
      poster: null
    };
  }
}

function saveVoting(voting) {
  try {
    fs.writeFileSync(VOTING_FILE, JSON.stringify(voting));
  } catch (err) {
    log(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${err}`);
  }
}

function loadHistory() {
  try {
    if (!fs.existsSync(HISTORY_FILE)) {
      return [];
    }
    return JSON.parse(fs.readFileSync(HISTORY_FILE, 'utf8'));
  } catch (err) {
    log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: ${err}`);
    return [];
  }
}

function saveHistory(history) {
  try {
    fs.writeFileSync(HISTORY_FILE, JSON.stringify(history));
  } catch (err) {
    log(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: ${err}`);
  }
}

function loadNextMeeting() {
  try {
    if (!fs.existsSync(NEXT_MEETING_FILE)) {
      return null;
    }
    return JSON.parse(fs.readFileSync(NEXT_MEETING_FILE, 'utf8'));
  } catch (err) {
    log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏: ${err}`);
    return null;
  }
}

function saveNextMeeting(meeting) {
  try {
    fs.writeFileSync(NEXT_MEETING_FILE, JSON.stringify(meeting));
  } catch (err) {
    log(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏: ${err}`);
  }
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ
function getMeetingInfo() {
  const nextMeeting = loadNextMeeting();

  if (nextMeeting) {
    return {
      date: nextMeeting.date || '13.07.2025',
      time: nextMeeting.time || '15:00',
      place: nextMeeting.place || '–ö–æ—Ñ–µ–π–Ω—è "–¢–æ–º –°–æ–π–µ—Ä", —É–ª. –®–º–∏–¥—Ç–∞, 12',
      film: nextMeeting.film || 'Amores perros',
      director: nextMeeting.director || '–ê–ª–µ—Ö–∞–Ω–¥—Ä–æ –ì–æ–Ω—Å–∞–ª–µ—Å –ò–Ω—å—è—Ä—Ä–∏—Ç—É',
      genre: nextMeeting.genre || '—Ç—Ä–∏–ª–ª–µ—Ä, –¥—Ä–∞–º–∞, –∫—Ä–∏–º–∏–Ω–∞–ª',
      country: nextMeeting.country || '–ú–µ–∫—Å–∏–∫–∞',
      year: nextMeeting.year || '2000',
      poster: nextMeeting.poster || 'https://sun9-77.userapi.com/s/v1/ig2/Q91kMgxR5t6YrRGSs3bx2uFJjj98U4Gl0JYTY-DWHmJe7gKzIQLw842yglmdJlLcqyWlE_TmHxDCwB8ER5HZPW5G.jpg?quality=95&as=32x44,48x66,72x99,108x148,160x219,240x329,360x494,480x658,540x741,640x878,720x988,729x1000&from=bu&cs=729x0',
      discussionNumber: nextMeeting.discussionNumber || '15'
    };
  }

  return {
    date: '13.07.2025',
    time: '15:00',
    place: '–ö–æ—Ñ–µ–π–Ω—è "–¢–æ–º –°–æ–π–µ—Ä", —É–ª. –®–º–∏–¥—Ç–∞, 12',
    film: 'Amores perros',
    director: '–ê–ª–µ—Ö–∞–Ω–¥—Ä–æ –ì–æ–Ω—Å–∞–ª–µ—Å –ò–Ω—å—è—Ä—Ä–∏—Ç—É',
    genre: '—Ç—Ä–∏–ª–ª–µ—Ä, –¥—Ä–∞–º–∞, –∫—Ä–∏–º–∏–Ω–∞–ª',
    country: '–ú–µ–∫—Å–∏–∫–∞',
    year: '2000',
    poster: 'https://sun9-77.userapi.com/s/v1/ig2/Q91kMgxR5t6YrRGSs3bx2uFJjj98U4Gl0JYTY-DWHmJe7gKzIQLw842yglmdJlLcqyWlE_TmHxDCwB8ER5HZPW5G.jpg?quality=95&as=32x44,48x66,72x99,108x148,160x219,240x329,360x494,480x658,540x741,640x878,720x988,729x1000&from=bu&cs=729x0',
    discussionNumber: '15'
  };
}

// –ú–µ–Ω—é
function createMainMenu() {
  return {
    reply_markup: JSON.stringify({
      resize_keyboard: true,
      keyboard: [
        [{ text: 'üçø –ë–ª–∏–∂–∞–π—à–∞—è –≤—Å—Ç—Ä–µ—á–∞' }, { text: 'üìÖ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞' }],
        [{ text: '‚ÑπÔ∏è –û –∫–ª—É–±–µ' }, { text: 'üì¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã' }],
        [{ text: '‚≠ê –û—Ü–µ–Ω–∏—Ç—å —Ñ–∏–ª—å–º' }, { text: 'üìú –ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫' }]
      ]
    })
  };
}

function createAdminMenu() {
  return {
    reply_markup: JSON.stringify({
      resize_keyboard: true,
      keyboard: [
        [{ text: 'üçø –ë–ª–∏–∂–∞–π—à–∞—è –≤—Å—Ç—Ä–µ—á–∞' }, { text: 'üìÖ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞' }],
        [{ text: '‚ÑπÔ∏è –û –∫–ª—É–±–µ' }, { text: 'üì¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã' }],
        [{ text: '‚≠ê –û—Ü–µ–Ω–∏—Ç—å —Ñ–∏–ª—å–º' }, { text: 'üìú –ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫' }],
        [{ text: 'üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å' }]
      ]
    })
  };
}

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
function createAdminPanel() {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', callback_data: 'admin_start_vote' }],
        [{ text: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', callback_data: 'admin_stop_vote' }],
        [{ text: 'üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', callback_data: 'admin_clear_votes' }],
        [{ text: 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è', callback_data: 'admin_vote_results' }],
        [{ text: 'üì® –†–∞–∑–æ—Å–ª–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', callback_data: 'admin_send_results' }],
        [{ text: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é', callback_data: 'admin_save_to_history' }],
        [{ text: 'üé¨ –î–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å–º', callback_data: 'admin_add_next_movie' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
      ]
    }
  };
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å—Ç—Ä–µ—á–µ
async function sendMeetingInfo(chatId) {
  const meeting = getMeetingInfo();
  const voting = loadVoting();

  try {
    await bot.sendAnimation(chatId, animations.movie, {
      caption: 'üé¨ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ...'
    });

    let message = `üé¨ <b>–ë–ª–∏–∂–∞–π—à–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∫–∏–Ω–æ-–∫–ª—É–±–∞:</b>\n\n` +
      `üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${meeting.date} –≤ ${meeting.time}\n` +
      `üìç <b>–ú–µ—Å—Ç–æ:</b> <a href="https://maps.google.com/?q=${encodeURIComponent(meeting.place)}">${meeting.place}</a>\n` +
      `üé• <b>–§–∏–ª—å–º:</b> ${meeting.film}\n` +
      `üé¨ <b>–†–µ–∂–∏—Å—Å–µ—Ä:</b> ${meeting.director}\n` +
      `üé≠ <b>–ñ–∞–Ω—Ä:</b> ${meeting.genre}\n` +
      `üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> ${meeting.country}\n` +
      `üìÖ <b>–ì–æ–¥:</b> ${meeting.year}\n` +
      `üî¢ <b>–û–±—Å—É–∂–¥–µ–Ω–∏–µ ‚Ññ:</b> ${meeting.discussionNumber}\n\n` +
      `–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º –∑–∞—Ä–∞–Ω–µ–µ!`;

    if (voting.active) {
      message += `\n\n‚≠ê <b>–ò–¥–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!</b> –í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Ñ–∏–ª—å–º –æ—Ç 1 –¥–æ 10 –±–∞–ª–ª–æ–≤.`;
      if (voting.endTime) {
        const endDate = new Date(voting.endTime);
        message += `\n–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è ${endDate.toLocaleString()}`;
      }
    } else if (voting.average) {
      message += `\n\n‚≠ê <b>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Ñ–∏–ª—å–º–∞:</b> ${voting.average.toFixed(1)}/10`;
    }

    await bot.sendPhoto(chatId, meeting.poster, {
      caption: message,
      parse_mode: 'HTML',
      ...(ADMIN_IDS.includes(chatId.toString()) ? createAdminMenu() : createMainMenu())
    });
  } catch (err) {
    log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${chatId}: ${err}`);
    await bot.sendAnimation(chatId, animations.error, {
      caption: '–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    });
  }
}

// –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –≤ 14:00)
const weeklySchedule = nodeSchedule.scheduleJob('0 14 * * 5', async () => {
  log('–ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏');
  const subscriptions = loadSubscriptions();

  for (const chatId of subscriptions) {
    try {
      await bot.sendChatAction(chatId, 'upload_photo');
      await sendMeetingInfo(chatId);
    } catch (err) {
      log(`–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ${chatId}: ${err}`);
    }
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    await bot.sendAnimation(chatId, animations.welcome, {
      caption: `–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! üëã\n–Ø –±–æ—Ç –∫–∏–Ω–æ-–∫–ª—É–±–∞ '–û–¥–∏—Å—Å–µ—è'!`
    });

    await bot.sendMessage(
      chatId,
      'üé• –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n' +
      '‚Ä¢ –£–∑–Ω–∞—Ç—å –æ –±–ª–∏–∂–∞–π—à–∏—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö\n' +
      '‚Ä¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n' +
      '‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ñ–∏–ª—å–º–∞—Ö\n' +
      '‚Ä¢ –û—Ü–µ–Ω–∏–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã\n\n' +
      '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
      ADMIN_IDS.includes(chatId.toString()) ? createAdminMenu() : createMainMenu()
    );
  } catch (err) {
    log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ /start ${chatId}: ${err}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  if (msg.text && !msg.text.startsWith('/')) {
    const chatId = msg.chat.id;

    switch(msg.text) {
      case 'üçø –ë–ª–∏–∂–∞–π—à–∞—è –≤—Å—Ç—Ä–µ—á–∞':
        await sendMeetingInfo(chatId);
        break;
      case 'üìÖ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞':
        await showSubscriptionMenu(chatId);
        break;
      case '‚ÑπÔ∏è –û –∫–ª—É–±–µ':
        await sendAboutInfo(chatId);
        break;
      case 'üì¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await sendContacts(chatId);
        break;
      case '‚≠ê –û—Ü–µ–Ω–∏—Ç—å —Ñ–∏–ª—å–º':
        await showRatingMenu(chatId);
        break;
      case 'üìú –ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫':
        await showHistory(chatId);
        break;
      case 'üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        if (ADMIN_IDS.includes(chatId.toString())) {
          await bot.sendMessage(chatId, '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', createAdminPanel());
        } else {
          await bot.sendMessage(chatId, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º', createMainMenu());
        }
        break;
      default:
        await bot.sendMessage(
          chatId,
          '–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üòâ',
          ADMIN_IDS.includes(chatId.toString()) ? createAdminMenu() : createMainMenu()
        );
    }
  }
});

// –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ü–µ–Ω–æ–∫
async function showHistory(chatId) {
  const history = loadHistory();

  if (history.length === 0) {
    return await bot.sendMessage(
      chatId,
      '–ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.',
      ADMIN_IDS.includes(chatId.toString()) ? createAdminMenu() : createMainMenu()
    );
  }

  let message = 'üìú <b>–ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫ —Ñ–∏–ª—å–º–æ–≤:</b>\n\n';
  for (const item of history) {
    message += `üé• <b>${item.film}</b>\n` +
               `üìÖ ${new Date(item.date).toLocaleDateString()}\n` +
               `‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${item.average.toFixed(1)}/10\n` +
               `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${item.participants}\n` +
               `üé≠ ${item.genre}\n\n`;

    try {
      await bot.sendPhoto(chatId, item.poster, {
        caption: message,
        parse_mode: 'HTML'
      });
      message = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    } catch (err) {
      log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–µ—Ä–∞ ${item.film}: ${err}`);
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
      await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
      message = '';
    }
  }

  await bot.sendMessage(
    chatId,
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    ADMIN_IDS.includes(chatId.toString()) ? createAdminMenu() : createMainMenu()
  );
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ—Ü–µ–Ω–∫–∏
async function showRatingMenu(chatId) {
  const voting = loadVoting();
  const meeting = getMeetingInfo();
  const userRating = voting.ratings[chatId];

  if (!voting.active) {
    return await bot.sendMessage(
      chatId,
      voting.average
        ? `–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Ñ–∏–ª—å–º–∞ "${meeting.film}": ${voting.average.toFixed(1)}/10`
        : '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–æ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Ñ–∏–ª—å–º–∞.',
      ADMIN_IDS.includes(chatId.toString()) ? createAdminMenu() : createMainMenu()
    );
  }

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '1', callback_data: 'rate_1' }, { text: '2', callback_data: 'rate_2' }, { text: '3', callback_data: 'rate_3' }],
        [{ text: '4', callback_data: 'rate_4' }, { text: '5', callback_data: 'rate_5' }, { text: '6', callback_data: 'rate_6' }],
        [{ text: '7', callback_data: 'rate_7' }, { text: '8', callback_data: 'rate_8' }, { text: '9', callback_data: 'rate_9' }],
        [{ text: '10', callback_data: 'rate_10' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
      ]
    }
  };

  await bot.sendMessage(
    chatId,
    userRating
      ? `–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —Ñ–∏–ª—å–º "${meeting.film}" –Ω–∞ ${userRating} –±–∞–ª–ª–æ–≤. –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É?`
      : `–û—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º "${meeting.film}" –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10 –±–∞–ª–ª–æ–≤:`,
    keyboard
  );
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
async function showSubscriptionMenu(chatId) {
  const subscriptions = loadSubscriptions();
  const isSubscribed = subscriptions.has(chatId.toString());

  const keyboard = {
    inline_keyboard: [
      [{
        text: isSubscribed ? '‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è' : '‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
        callback_data: isSubscribed ? 'unsubscribe' : 'subscribe'
      }],
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
    ]
  };

  await bot.sendMessage(
    chatId,
    isSubscribed
      ? '–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–ª—É–±–∞! üéâ'
      : '–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö üòî',
    { reply_markup: keyboard }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const subscriptions = loadSubscriptions();
  const voting = loadVoting();

  try {
    if (query.data.startsWith('rate_')) {
      if (!voting.active) {
        return await bot.answerCallbackQuery(query.id, { text: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!' });
      }

      const rating = parseInt(query.data.split('_')[1]);
      voting.ratings[chatId] = rating;
      saveVoting(voting);

      await bot.answerCallbackQuery(query.id, { text: `–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É ${rating} –±–∞–ª–ª–æ–≤!` });
      await bot.editMessageText(`–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ ${rating} –±–∞–ª–ª–æ–≤ —Ñ–∏–ª—å–º—É.`, {
        chat_id: chatId,
        message_id: query.message.message_id,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
          ]
        }
      });
    } else if (query.data.startsWith('admin_')) {
      if (!ADMIN_IDS.includes(chatId.toString())) {
        return await bot.answerCallbackQuery(query.id, { text: '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
      }

      const meeting = getMeetingInfo();

      switch(query.data) {
        case 'admin_start_vote':
          voting.active = true;
          voting.startTime = new Date().toISOString();
          voting.endTime = null;
          voting.ratings = {};
          voting.average = null;
          voting.film = meeting.film;
          voting.genre = meeting.genre;
          voting.poster = meeting.poster;
          saveVoting(voting);

          await bot.answerCallbackQuery(query.id, { text: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ!' });
          await bot.editMessageText('‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ! –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –º–æ–≥—É—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ñ–∏–ª—å–º.', {
            chat_id: chatId,
            message_id: query.message.message_id,
            reply_markup: createAdminPanel().reply_markup
          });
          break;

        case 'admin_stop_vote':
          voting.active = false;
          voting.endTime = new Date().toISOString();

          // –ü–æ–¥—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏
          const ratings = Object.values(voting.ratings);
          if (ratings.length > 0) {
            const sum = ratings.reduce((a, b) => a + b, 0);
            voting.average = sum / ratings.length;
          }

          saveVoting(voting);

          await bot.answerCallbackQuery(query.id, { text: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!' });
          await bot.editMessageText('üõë –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –º–æ–≥—É—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ñ–∏–ª—å–º.', {
            chat_id: chatId,
            message_id: query.message.message_id,
            reply_markup: createAdminPanel().reply_markup
          });
          break;

        case 'admin_clear_votes':
          voting.ratings = {};
          voting.average = null;
          saveVoting(voting);

          await bot.answerCallbackQuery(query.id, { text: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã!' });
          await bot.editMessageText('üßπ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.', {
            chat_id: chatId,
            message_id: query.message.message_id,
            reply_markup: createAdminPanel().reply_markup
          });
          break;

        case 'admin_vote_results':
          const currentRatings = Object.values(voting.ratings);
          let resultsMessage = `üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:</b>\n\n` +
            `üé• –§–∏–ª—å–º: ${voting.film || meeting.film}\n` +
            `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${currentRatings.length}\n`;

          if (currentRatings.length > 0) {
            const sum = currentRatings.reduce((a, b) => a + b, 0);
            const average = sum / currentRatings.length;

            resultsMessage += `‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${average.toFixed(1)}/10\n\n`;

            // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
            const ratingDistribution = Array(10).fill(0);
            currentRatings.forEach(r => ratingDistribution[r-1]++);

            resultsMessage += `<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:</b>\n`;
            ratingDistribution.forEach((count, index) => {
              resultsMessage += `${index+1} –±–∞–ª–ª–æ–≤: ${count} –≥–æ–ª–æ—Å–æ–≤\n`;
            });
          } else {
            resultsMessage += `–ï—â–µ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫.`;
          }

          await bot.answerCallbackQuery(query.id);
          await bot.editMessageText(resultsMessage, {
            chat_id: chatId,
            message_id: query.message.message_id,
            parse_mode: 'HTML',
            reply_markup: createAdminPanel().reply_markup
          });
          break;

        case 'admin_send_results':
          if (!voting.ratings || Object.keys(voting.ratings).length === 0) {
            return await bot.answerCallbackQuery(query.id, { text: '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏' });
          }

          const currentRatingsForSend = Object.values(voting.ratings);
          const sumForSend = currentRatingsForSend.reduce((a, b) => a + b, 0);
          const averageForSend = sumForSend / currentRatingsForSend.length;

          const subscriptionsForSend = loadSubscriptions();
          let sentCount = 0;

          for (const subChatId of subscriptionsForSend) {
            try {
              await bot.sendMessage(
                subChatId,
                `‚≠ê <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:</b>\n\n` +
                `–§–∏–ª—å–º: ${voting.film || meeting.film}\n` +
                `–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${averageForSend.toFixed(1)}/10\n` +
                `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${currentRatingsForSend.length}\n\n` +
                `–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!`,
                { parse_mode: 'HTML' }
              );
              sentCount++;
            } catch (err) {
              log(`–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ${subChatId}: ${err}`);
            }
          }

          await bot.answerCallbackQuery(query.id, { text: `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${sentCount} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º` });
          await bot.editMessageText(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Ä–∞–∑–æ—Å–ª–∞–Ω—ã ${sentCount} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º`, {
            chat_id: chatId,
            message_id: query.message.message_id,
            reply_markup: createAdminPanel().reply_markup
          });
          break;

        case 'admin_save_to_history':
          if (!voting.average || !voting.film) {
            return await bot.answerCallbackQuery(query.id, { text: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' });
          }

          const history = loadHistory();
          history.push({
            film: voting.film,
            genre: voting.genre || meeting.genre,
            average: voting.average,
            participants: Object.keys(voting.ratings).length,
            date: voting.endTime || new Date().toISOString(),
            poster: voting.poster || meeting.poster
          });
          saveHistory(history);

          await bot.answerCallbackQuery(query.id, { text: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é!' });
          await bot.editMessageText('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é.', {
            chat_id: chatId,
            message_id: query.message.message_id,
            reply_markup: createAdminPanel().reply_markup
          });
          break;

          case 'admin_add_next_movie':
  await bot.answerCallbackQuery(query.id);
  await bot.editMessageText('–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–∏–ª—å–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
    '<b>–î–∞—Ç–∞|–í—Ä–µ–º—è|–ú–µ—Å—Ç–æ|–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞|–†–µ–∂–∏—Å—Å–µ—Ä|–ñ–∞–Ω—Ä|–°—Ç—Ä–∞–Ω–∞|–ì–æ–¥|URL –ø–æ—Å—Ç–µ—Ä–∞|–ù–æ–º–µ—Ä –æ–±—Å—É–∂–¥–µ–Ω–∏—è</b>\n\n' +
    '–ü—Ä–∏–º–µ—Ä:\n' +
    '20.07.2025|15:00|–ö–æ—Ñ–µ–π–Ω—è "–¢–æ–º –°–æ–π–µ—Ä"|"–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä"|"–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –ù–æ–ª–∞–Ω"|"—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –¥—Ä–∞–º–∞"|"–°–®–ê"|"2014"|"https://example.com/poster.jpg"|"16"', {
    chat_id: chatId,
    message_id: query.message.message_id,
    parse_mode: 'HTML'
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–µ
  bot.once('message', async (msg) => {
    if (msg.from.id.toString() === chatId.toString()) {
      const parts = msg.text.split('|').map(part => part.trim());
      if (parts.length === 10) {
        const [date, time, place, film, director, genre, country, year, poster, discussionNumber] = parts;
        saveNextMeeting({
          date,
          time,
          place,
          film,
          director,
          genre,
          country,
          year,
          poster,
          discussionNumber
        });
        await bot.sendMessage(chatId, '‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–∏–ª—å–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', createAdminPanel());
      } else {
        await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', createAdminPanel());
      }
    }
  });
  break;
      }
    } else {
      switch(query.data) {
        case 'subscribe':
          subscriptions.add(chatId.toString());
          saveSubscriptions(subscriptions);
          await bot.answerCallbackQuery(query.id, { text: '‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!' });
          await bot.editMessageText('üéâ –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö!', {
            chat_id: chatId,
            message_id: query.message.message_id,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
              ]
            }
          });
          break;

        case 'unsubscribe':
          subscriptions.delete(chatId.toString());
          saveSubscriptions(subscriptions);
          await bot.answerCallbackQuery(query.id, { text: '‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å' });
          await bot.editMessageText('–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–µ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üò¢', {
            chat_id: chatId,
            message_id: query.message.message_id,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
              ]
            }
          });
          break;

        case 'back_to_main':
          await bot.deleteMessage(chatId, query.message.message_id);
          await bot.sendMessage(
            chatId,
            '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
            ADMIN_IDS.includes(chatId.toString()) ? createAdminMenu() : createMainMenu()
          );
          break;
      }
    }
  } catch (err) {
    log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback ${chatId}: ${err}`);
    await bot.sendAnimation(chatId, animations.error, {
      caption: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
    });
  }
});

// –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
bot.onText(/\/notify (.+)/, async (msg, match) => {
  if (!ADMIN_IDS.includes(msg.from.id.toString())) {
    return bot.sendMessage(msg.chat.id, 'üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
  }

  const message = match[1];
  const subscriptions = loadSubscriptions();
  let sentCount = 0;

  await bot.sendChatAction(msg.chat.id, 'typing');

  for (const chatId of subscriptions) {
    try {
      await bot.sendMessage(chatId, `üì¢ <b>–í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n${message}\n\n<i>–° –ª—é–±–æ–≤—å—é, –≤–∞—à –∫–∏–Ω–æ-–∫–ª—É–±</i>`, {
        parse_mode: 'HTML'
      });
      sentCount++;
    } catch (err) {
      log(`–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ${chatId}: ${err}`);
    }
  }

  await bot.sendAnimation(msg.chat.id, animations.success, {
    caption: `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º`
  });
});

bot.onText(/\/subscribers/, (msg) => {
  if (!ADMIN_IDS.includes(msg.from.id.toString())) {
    return bot.sendMessage(msg.chat.id, 'üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  }

  const subscriptions = loadSubscriptions();
  bot.sendMessage(
    msg.chat.id,
    `üìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${subscriptions.size}\n` +
    `üë• –°–ø–∏—Å–æ–∫: ${[...subscriptions].join(', ')}`,
    { parse_mode: 'HTML' }
  );
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function sendAboutInfo(chatId) {
  await bot.sendMessage(
    chatId,
    'üé• <b>–ö–∏–Ω–æ-–∫–ª—É–± "–û–¥–∏—Å—Å–µ—è"</b>\n\n' +
    '–ú—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é, —á—Ç–æ–±—ã:\n' +
    '‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞ —Ö–æ—Ä–æ—à–µ–µ –∫–∏–Ω–æ\n' +
    '‚Ä¢ –û–±—Å—É–∂–¥–∞—Ç—å —Ñ–∏–ª—å–º—ã\n' +
    '‚Ä¢ –ó–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏\n\n' +
    '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!',
    {
      parse_mode: 'HTML',
      ...(ADMIN_IDS.includes(chatId.toString()) ? createAdminMenu() : createMainMenu())
    }
  );
}

async function sendContacts(chatId) {
  await bot.sendMessage(
    chatId,
    'üì¨ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤:</b>\n\n' +
    `‚Ä¢ <b>–ê–¥–º–∏–Ω –±–æ—Ç–∞:</b>  @GeekLS\n` +
    `‚Ä¢ <b>–ë–æ—Å—Å:</b>  <a href="https://vk.com/id8771550">–ù–∞—Å—Ç–µ–Ω—å–∫–∞</a>\n` +
    `‚Ä¢ <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b>  +7 (978)73 63 212\n` +
    `‚Ä¢ <b>–ù–∞—à —Å–∞–π—Ç:</b> <a href="https://stas18.github.io/ulysses_club/">–ö–ò–ù–û–ö–õ–£–ë –û–î–ò–°–°–ï–Ø</a>\n` +
    '–ü–∏—à–∏—Ç–µ –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º!',
    {
      parse_mode: 'HTML',
      ...(ADMIN_IDS.includes(chatId.toString()) ? createAdminMenu() : createMainMenu())
    }
  );
}

log('üé¨ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∫–∏–Ω–æ–º–∞–Ω–∏–∏!');